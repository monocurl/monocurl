[monocurl version: "0.1.0" type: "scene"]

[slide name: "config"]
	background = WHITE
	camera = Camera:
		near: 0.1 
		far: 10
		up: {0,1,0}
		origin: {0,0,4}
		target: {0,0,0}
	
	let X = {1, 2, 1, 3, 4, 8, 2, 3, 1, 5, 3, 3, 1}
	let TX = right_key(X)
	
	/* stack helpers */
	func last(x) = x[len(x) - 1]
	func pop_last(x) = identity:
		var ret = {}
		for i in 0 :< len(x) - 1
			ret += x[i]
		element: ret
[slide name: "slide_1"]
	func Bars(tagged_array, highlights) = identity:
		var ret = {}
		for pair in tagged_array
			ret += Rect:
				center: ORIGIN
				width: 0.25
				height: pair[0] / 2.5
				tag: {pair[1]}
				stroke: BLACK
				fill: GRAY
	
		ret = XStack:
			mesh_vector: ret
			align_dir: DOWN
	
		ret = Centered(ret, ORIGIN)
		ret = Refilled:
			root: ret
			tag_predicate(tag): tag[0] in highlights
			start_color: RED
			end_color: ORANGE
			start_vec: LEFT
			end_vec: RIGHT
		element: ret
	
	func Pointer(bars, index) = Triangle:
		let left = mesh_left:
			root: bars
			tag_predicate(tag): tag[0] == index
		let right = mesh_right:
			root: bars
			tag_predicate(tag): tag[0] == index
		let bottom = mesh_down(bars) - 0.2
		p: {left, bottom, 0}
		q: {right, bottom, 0}
		r: {(left + right) / 2, bottom + 0.1, 0}
		tag: {}
		stroke: BLACK
		fill: BLACK
	
	func TextStack(descending) = identity:
		var meshes = {}
		meshes += Text:
			text: "Current"
			scale: 1
			stroke: CLEAR
			fill: BLACK
		meshes[0] = Centered:
			mesh: meshes[0]
			at: {-2.5, 2, 0}
		for x in descending	
			meshes += Tex:
				tex: "\pin{%{x}}{%{X[x]}}"
				scale: 0.7
				stroke: CLEAR
				fill: BLACK
		element: Stack:
			mesh_vector: meshes
			dir: DOWN
			align: center
		
	var descending = {}
	tree bars = Bars:
		tagged_array: TX
		highlights: {}
	tree cursor = Pointer:
		bars: bars
		index: 0
	tree stack = TextStack:
		descending: descending
	
	p += Set:
		vars&: {bars, cursor, stack}
	
[slide name: "slide_2"]
	for i in 0 :< len(X)
		while len(descending) && X[last(descending)] < X[i]	
			descending = pop_last(descending)
			bars.highlights = descending
			stack.descending = descending
			
			p += TagTransform:
				meshes&: {bars, stack}
				time: 0.5
		
		descending += i
		bars.highlights = descending
		stack.descending = descending
		
		p += TagTransform:
			meshes&: {bars, stack}
			time: 0.5
		
		if i < len(X) - 1
			cursor.index += 1
			p += Transform:
				meshes&: cursor
				time: 0.5
			
